name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg poppler-utils

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linter (ruff)
        continue-on-error: true
        run: |
          pip install ruff
          ruff check app/ --select E,F,W

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Generate coverage badge
        if: matrix.python-version == '3.11'
        run: |
          pip install coverage-badge
          coverage-badge -o coverage.svg -f

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy

      - name: Run Black (formatter check)
        continue-on-error: true
        run: black --check app/

      - name: Run isort (import sorting)
        continue-on-error: true
        run: isort --check-only app/

      - name: Run Ruff (linter)
        run: ruff check app/ --ignore E501

      - name: Run mypy (type checking)
        continue-on-error: true
        run: mypy app/ --ignore-missing-imports

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t podcast-engine:test .

      - name: Test Docker image
        run: |
          docker run --rm podcast-engine:test python -c "from app.main import app; print('âœ… Import successful')"
